{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":73291,"databundleVersionId":8930475,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/srsses/insurance-cross-selling?scriptVersionId=189963156\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"6927113f-087f-4a41-987e-8b4492b4d2ad","_cell_guid":"dac9cea8-9acb-43ac-aa41-aa934cffd0e0","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-07-27T06:25:22.474443Z","iopub.execute_input":"2024-07-27T06:25:22.475035Z","iopub.status.idle":"2024-07-27T06:25:22.83672Z","shell.execute_reply.started":"2024-07-27T06:25:22.475001Z","shell.execute_reply":"2024-07-27T06:25:22.836Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s4e7/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/playground-series-s4e7/test.csv\")\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:25:23.23333Z","iopub.execute_input":"2024-07-27T06:25:23.23383Z","iopub.status.idle":"2024-07-27T06:25:56.636335Z","shell.execute_reply.started":"2024-07-27T06:25:23.233798Z","shell.execute_reply":"2024-07-27T06:25:56.635324Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n0   0    Male   21                1         35.0                   0   \n1   1    Male   43                1         28.0                   0   \n2   2  Female   25                1         14.0                   1   \n3   3  Female   35                1          1.0                   0   \n4   4  Female   36                1         15.0                   1   \n\n  Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \\\n0    1-2 Year            Yes         65101.0                 124.0      187   \n1   > 2 Years            Yes         58911.0                  26.0      288   \n2    < 1 Year             No         38043.0                 152.0      254   \n3    1-2 Year            Yes          2630.0                 156.0       76   \n4    1-2 Year             No         31951.0                 152.0      294   \n\n   Response  \n0         0  \n1         1  \n2         0  \n3         0  \n4         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Driving_License</th>\n      <th>Region_Code</th>\n      <th>Previously_Insured</th>\n      <th>Vehicle_Age</th>\n      <th>Vehicle_Damage</th>\n      <th>Annual_Premium</th>\n      <th>Policy_Sales_Channel</th>\n      <th>Vintage</th>\n      <th>Response</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Male</td>\n      <td>21</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>65101.0</td>\n      <td>124.0</td>\n      <td>187</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Male</td>\n      <td>43</td>\n      <td>1</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>&gt; 2 Years</td>\n      <td>Yes</td>\n      <td>58911.0</td>\n      <td>26.0</td>\n      <td>288</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Female</td>\n      <td>25</td>\n      <td>1</td>\n      <td>14.0</td>\n      <td>1</td>\n      <td>&lt; 1 Year</td>\n      <td>No</td>\n      <td>38043.0</td>\n      <td>152.0</td>\n      <td>254</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Female</td>\n      <td>35</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1-2 Year</td>\n      <td>Yes</td>\n      <td>2630.0</td>\n      <td>156.0</td>\n      <td>76</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Female</td>\n      <td>36</td>\n      <td>1</td>\n      <td>15.0</td>\n      <td>1</td>\n      <td>1-2 Year</td>\n      <td>No</td>\n      <td>31951.0</td>\n      <td>152.0</td>\n      <td>294</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() / 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() / 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:25:56.638125Z","iopub.execute_input":"2024-07-27T06:25:56.638418Z","iopub.status.idle":"2024-07-27T06:25:56.651281Z","shell.execute_reply.started":"2024-07-27T06:25:56.638393Z","shell.execute_reply":"2024-07-27T06:25:56.650407Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:25:56.652271Z","iopub.execute_input":"2024-07-27T06:25:56.652514Z","iopub.status.idle":"2024-07-27T06:26:02.990336Z","shell.execute_reply.started":"2024-07-27T06:25:56.652493Z","shell.execute_reply":"2024-07-27T06:26:02.989383Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Memory usage of dataframe is 1053.30 MB\nMemory usage after optimization is: 230.41 MB\nDecreased by 78.1%\nMemory usage of dataframe is 643.68 MB\nMemory usage after optimization is: 146.29 MB\nDecreased by 77.3%\n","output_type":"stream"}]},{"cell_type":"code","source":"train['Driving_License'] = train['Driving_License'].astype(\"object\")\ntrain['Region_Code'] = train['Region_Code'].astype(\"object\")\ntrain['Previously_Insured'] = train['Previously_Insured'].astype(\"object\")\ntest['Driving_License'] = test['Driving_License'].astype(\"object\")\ntest['Region_Code'] = test['Region_Code'].astype(\"object\")\ntest['Previously_Insured'] = test['Previously_Insured'].astype(\"object\")","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:02.992505Z","iopub.execute_input":"2024-07-27T06:26:02.992748Z","iopub.status.idle":"2024-07-27T06:26:05.76236Z","shell.execute_reply.started":"2024-07-27T06:26:02.992726Z","shell.execute_reply":"2024-07-27T06:26:05.761496Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"train['Age'] = np.where((train['Age']>=20) & (train['Age']<40), 'youth',\\\n                        np.where((train['Age']>=40) & (train['Age']<60), 'Mid_Age',\\\n                                 np.where((train['Age']>=60) & (train['Age']<80), 'Senior','Super_Senior')))\n\ntest['Age'] = np.where((test['Age']>=20) & (test['Age']<40), 'youth',\\\n                        np.where((test['Age']>=40) & (test['Age']<60), 'Mid_Age',\\\n                                 np.where((test['Age']>=60) & (test['Age']<80), 'Senior','Super_Senior')))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:05.763415Z","iopub.execute_input":"2024-07-27T06:26:05.763667Z","iopub.status.idle":"2024-07-27T06:26:11.374738Z","shell.execute_reply.started":"2024-07-27T06:26:05.763645Z","shell.execute_reply":"2024-07-27T06:26:11.373382Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train = train.drop(\"id\", axis = 1)\ntest = test.drop(\"id\", axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:11.376035Z","iopub.execute_input":"2024-07-27T06:26:11.376368Z","iopub.status.idle":"2024-07-27T06:26:13.0819Z","shell.execute_reply.started":"2024-07-27T06:26:11.376339Z","shell.execute_reply":"2024-07-27T06:26:13.08092Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"upper = np.percentile(train['Annual_Premium'],75)\nlower = np.percentile(train['Annual_Premium'],25)\nIQR = upper-lower\ntrain['Annual_Premium']= np.where(train['Annual_Premium'] >= (1.5*IQR)+upper, upper,\n                                 np.where(train['Annual_Premium'] <= lower-(1.5*IQR), lower,train['Annual_Premium']))\n\n\nupper_t = np.percentile(test['Annual_Premium'],75)\nlower_t = np.percentile(test['Annual_Premium'],25)\nIQR = upper_t-lower_t\ntest['Annual_Premium']= np.where(test['Annual_Premium'] >= (1.5*IQR)+upper_t, upper_t,\n                                 np.where(test['Annual_Premium'] <= lower_t-(1.5*IQR), lower_t,test['Annual_Premium']))","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:13.083043Z","iopub.execute_input":"2024-07-27T06:26:13.08332Z","iopub.status.idle":"2024-07-27T06:26:13.738499Z","shell.execute_reply.started":"2024-07-27T06:26:13.083296Z","shell.execute_reply":"2024-07-27T06:26:13.737515Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:13.739677Z","iopub.execute_input":"2024-07-27T06:26:13.739984Z","iopub.status.idle":"2024-07-27T06:26:13.75696Z","shell.execute_reply.started":"2024-07-27T06:26:13.739936Z","shell.execute_reply":"2024-07-27T06:26:13.755991Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 11504798 entries, 0 to 11504797\nData columns (total 11 columns):\n #   Column                Dtype   \n---  ------                -----   \n 0   Gender                category\n 1   Age                   object  \n 2   Driving_License       object  \n 3   Region_Code           object  \n 4   Previously_Insured    object  \n 5   Vehicle_Age           category\n 6   Vehicle_Damage        category\n 7   Annual_Premium        float32 \n 8   Policy_Sales_Channel  float16 \n 9   Vintage               int16   \n 10  Response              int8    \ndtypes: category(3), float16(1), float32(1), int16(1), int8(1), object(4)\nmemory usage: 482.8+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"cat_cols = [i for i in train.columns if train[i].dtype == \"object\" or train[i].dtype == \"category\" ]","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:13.758093Z","iopub.execute_input":"2024-07-27T06:26:13.758376Z","iopub.status.idle":"2024-07-27T06:26:13.766268Z","shell.execute_reply.started":"2024-07-27T06:26:13.758352Z","shell.execute_reply":"2024-07-27T06:26:13.765444Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"cat_cols","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:13.769655Z","iopub.execute_input":"2024-07-27T06:26:13.769888Z","iopub.status.idle":"2024-07-27T06:26:13.776176Z","shell.execute_reply.started":"2024-07-27T06:26:13.769868Z","shell.execute_reply":"2024-07-27T06:26:13.775353Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"['Gender',\n 'Age',\n 'Driving_License',\n 'Region_Code',\n 'Previously_Insured',\n 'Vehicle_Age',\n 'Vehicle_Damage']"},"metadata":{}}]},{"cell_type":"code","source":"for col in cat_cols:\n    if col == 'Target':\n        continue\n    else:\n        total_feats = set(train[col].unique())|set(test[col].unique())\n        common_feats = set(train[col].unique())&set(test[col].unique())\n        missing_in_both = total_feats-common_feats\n        train[col] = np.where(train[col].isin(missing_in_both),0,train[col])\n        test[col] = np.where(test[col].isin(missing_in_both),0,test[col])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:13.77709Z","iopub.execute_input":"2024-07-27T06:26:13.777344Z","iopub.status.idle":"2024-07-27T06:26:31.932994Z","shell.execute_reply.started":"2024-07-27T06:26:13.777312Z","shell.execute_reply":"2024-07-27T06:26:31.932006Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n# train = pd.get_dummies(train,columns = ['Region_Code'])\ny = train['Response']\ntrain = train.drop(\"Response\", axis = 1)\nlb = LabelEncoder()\ncat_cols = [i for i in train.columns if train[i].dtypes=='object' or train[i].dtypes == bool]\nfor i in cat_cols:\n    lb = lb.fit(train[i])\n    train[i] = lb.transform(train[i])\n    test[i] = lb.transform(test[i])","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:26:31.934193Z","iopub.execute_input":"2024-07-27T06:26:31.934485Z","iopub.status.idle":"2024-07-27T06:27:06.26907Z","shell.execute_reply.started":"2024-07-27T06:26:31.93446Z","shell.execute_reply":"2024-07-27T06:27:06.268241Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:06.270145Z","iopub.execute_input":"2024-07-27T06:27:06.270404Z","iopub.status.idle":"2024-07-27T06:27:07.048594Z","shell.execute_reply.started":"2024-07-27T06:27:06.270381Z","shell.execute_reply":"2024-07-27T06:27:07.047698Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Memory usage of dataframe is 702.20 MB\nMemory usage after optimization is: 142.63 MB\nDecreased by 79.7%\nMemory usage of dataframe is 468.13 MB\nMemory usage after optimization is: 95.09 MB\nDecreased by 79.7%\n","output_type":"stream"}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:07.049828Z","iopub.execute_input":"2024-07-27T06:27:07.050146Z","iopub.status.idle":"2024-07-27T06:27:07.059449Z","shell.execute_reply.started":"2024-07-27T06:27:07.050121Z","shell.execute_reply":"2024-07-27T06:27:07.058386Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 11504798 entries, 0 to 11504797\nData columns (total 10 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   Gender                int8   \n 1   Age                   int8   \n 2   Driving_License       int8   \n 3   Region_Code           int8   \n 4   Previously_Insured    int8   \n 5   Vehicle_Age           int8   \n 6   Vehicle_Damage        int8   \n 7   Annual_Premium        float16\n 8   Policy_Sales_Channel  float16\n 9   Vintage               int16  \ndtypes: float16(2), int16(1), int8(7)\nmemory usage: 142.6 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"x = train\ny = lb.fit_transform(y)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:07.060891Z","iopub.execute_input":"2024-07-27T06:27:07.061221Z","iopub.status.idle":"2024-07-27T06:27:07.488903Z","shell.execute_reply.started":"2024-07-27T06:27:07.061196Z","shell.execute_reply":"2024-07-27T06:27:07.488146Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx = sc.fit_transform(x)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:07.490069Z","iopub.execute_input":"2024-07-27T06:27:07.490414Z","iopub.status.idle":"2024-07-27T06:27:09.114097Z","shell.execute_reply.started":"2024-07-27T06:27:07.490383Z","shell.execute_reply":"2024-07-27T06:27:09.11333Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBClassifier","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:09.115144Z","iopub.execute_input":"2024-07-27T06:27:09.1154Z","iopub.status.idle":"2024-07-27T06:27:09.339027Z","shell.execute_reply.started":"2024-07-27T06:27:09.115378Z","shell.execute_reply":"2024-07-27T06:27:09.338233Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = .2)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:09.339992Z","iopub.execute_input":"2024-07-27T06:27:09.340237Z","iopub.status.idle":"2024-07-27T06:27:11.479972Z","shell.execute_reply.started":"2024-07-27T06:27:09.340215Z","shell.execute_reply":"2024-07-27T06:27:11.478932Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"xg = XGBClassifier(n_estimators = 700,random_state = 4,device=\"cuda\",scale_pos_weight=7.13)\nfrom sklearn.model_selection import cross_validate\nc = cross_validate(xg, x, y, cv=5, scoring = 'roc_auc',return_estimator = True)\n# xg.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:27:11.481353Z","iopub.execute_input":"2024-07-27T06:27:11.482135Z","iopub.status.idle":"2024-07-27T06:30:46.24108Z","shell.execute_reply.started":"2024-07-27T06:27:11.482098Z","shell.execute_reply":"2024-07-27T06:30:46.240228Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [06:27:55] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\nPotential solutions:\n- Use a data structure that matches the device ordinal in the booster.\n- Set the device for booster before call to inplace_predict.\n\nThis warning will only be shown once.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"}]},{"cell_type":"code","source":"c.keys()","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:30:46.242193Z","iopub.execute_input":"2024-07-27T06:30:46.242479Z","iopub.status.idle":"2024-07-27T06:30:46.24813Z","shell.execute_reply.started":"2024-07-27T06:30:46.242454Z","shell.execute_reply":"2024-07-27T06:30:46.24726Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"dict_keys(['fit_time', 'score_time', 'estimator', 'test_score'])"},"metadata":{}}]},{"cell_type":"code","source":"c['test_score']","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:30:46.275497Z","iopub.execute_input":"2024-07-27T06:30:46.27575Z","iopub.status.idle":"2024-07-27T06:30:46.281345Z","shell.execute_reply.started":"2024-07-27T06:30:46.275728Z","shell.execute_reply":"2024-07-27T06:30:46.280433Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"array([0.87600954, 0.87592171, 0.87644295, 0.87638692, 0.87658713])"},"metadata":{}}]},{"cell_type":"code","source":"# from sklearn.metrics import roc_auc_score\n# roc_auc_score(y_test,pr)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:30:46.28251Z","iopub.execute_input":"2024-07-27T06:30:46.282771Z","iopub.status.idle":"2024-07-27T06:30:46.288877Z","shell.execute_reply.started":"2024-07-27T06:30:46.282749Z","shell.execute_reply":"2024-07-27T06:30:46.288125Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"test = sc.transform(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:30:46.289884Z","iopub.execute_input":"2024-07-27T06:30:46.290227Z","iopub.status.idle":"2024-07-27T06:30:46.746094Z","shell.execute_reply.started":"2024-07-27T06:30:46.290187Z","shell.execute_reply":"2024-07-27T06:30:46.745223Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"out = c['estimator'][-1].predict(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:39:16.672117Z","iopub.execute_input":"2024-07-27T06:39:16.672789Z","iopub.status.idle":"2024-07-27T06:39:19.082396Z","shell.execute_reply.started":"2024-07-27T06:39:16.672753Z","shell.execute_reply":"2024-07-27T06:39:19.081429Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"sub = pd.read_csv(\"/kaggle/input/playground-series-s4e7/sample_submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:39:19.084077Z","iopub.execute_input":"2024-07-27T06:39:19.084446Z","iopub.status.idle":"2024-07-27T06:39:20.738847Z","shell.execute_reply.started":"2024-07-27T06:39:19.084413Z","shell.execute_reply":"2024-07-27T06:39:20.738003Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"sub['Response'] = out","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:39:32.388829Z","iopub.execute_input":"2024-07-27T06:39:32.389205Z","iopub.status.idle":"2024-07-27T06:39:32.418236Z","shell.execute_reply.started":"2024-07-27T06:39:32.389168Z","shell.execute_reply":"2024-07-27T06:39:32.417428Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"sub.to_csv(\"submission.csv\", index = False)","metadata":{"execution":{"iopub.status.busy":"2024-07-27T06:39:40.32137Z","iopub.execute_input":"2024-07-27T06:39:40.321994Z","iopub.status.idle":"2024-07-27T06:39:49.524143Z","shell.execute_reply.started":"2024-07-27T06:39:40.321964Z","shell.execute_reply":"2024-07-27T06:39:49.523183Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}