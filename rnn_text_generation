{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9671775,"sourceType":"datasetVersion","datasetId":5910449},{"sourceId":9714644,"sourceType":"datasetVersion","datasetId":5774474},{"sourceId":9729252,"sourceType":"datasetVersion","datasetId":5953735}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM,Dense, Activation,Dropout, Bidirectional, Input,Embedding,Reshape\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nimport pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-26T17:21:20.172245Z","iopub.execute_input":"2024-10-26T17:21:20.172646Z","iopub.status.idle":"2024-10-26T17:21:20.178410Z","shell.execute_reply.started":"2024-10-26T17:21:20.172606Z","shell.execute_reply":"2024-10-26T17:21:20.177388Z"},"trusted":true},"execution_count":451,"outputs":[]},{"cell_type":"markdown","source":"Imported specific libraries required for this task. you can import libraries as you require them on the go","metadata":{}},{"cell_type":"code","source":"# text_data = pd.read_csv(\"/kaggle/input/top-spotify-podcasts-daily-updated/top_podcasts.csv\",usecols = ['description'])","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:21.063684Z","iopub.execute_input":"2024-10-26T17:21:21.064562Z","iopub.status.idle":"2024-10-26T17:21:21.068561Z","shell.execute_reply.started":"2024-10-26T17:21:21.064521Z","shell.execute_reply":"2024-10-26T17:21:21.067493Z"},"trusted":true},"execution_count":452,"outputs":[]},{"cell_type":"code","source":"path = \"/kaggle/input/new-nlp/nlp1.txt\"\n\ntext = open(path,'rb').read().decode(encoding = 'utf-8').lower()\n\n# text = 'oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off\\\n#     errors from different computation orders. To turn them off, set the environment variable'.lower()","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:21.269021Z","iopub.execute_input":"2024-10-26T17:21:21.269958Z","iopub.status.idle":"2024-10-26T17:21:21.305880Z","shell.execute_reply.started":"2024-10-26T17:21:21.269916Z","shell.execute_reply":"2024-10-26T17:21:21.304997Z"},"trusted":true},"execution_count":453,"outputs":[]},{"cell_type":"code","source":"chars = set(text)","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:21.519500Z","iopub.execute_input":"2024-10-26T17:21:21.519826Z","iopub.status.idle":"2024-10-26T17:21:21.529991Z","shell.execute_reply.started":"2024-10-26T17:21:21.519794Z","shell.execute_reply":"2024-10-26T17:21:21.529068Z"},"trusted":true},"execution_count":454,"outputs":[]},{"cell_type":"code","source":"chars = [i for i in chars if i not in ['\\n',' ', 'a','b','c','d','e','f','g','h','i','j','k','l','m','n',\\\n                                       'o','p','q','r','s','t','u','v','w','x','y','z',]]","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:21.708494Z","iopub.execute_input":"2024-10-26T17:21:21.708776Z","iopub.status.idle":"2024-10-26T17:21:21.713677Z","shell.execute_reply.started":"2024-10-26T17:21:21.708746Z","shell.execute_reply":"2024-10-26T17:21:21.712695Z"},"trusted":true},"execution_count":455,"outputs":[]},{"cell_type":"code","source":"text = [i for i in text if i not in chars]","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:21.939659Z","iopub.execute_input":"2024-10-26T17:21:21.939957Z","iopub.status.idle":"2024-10-26T17:21:22.688787Z","shell.execute_reply.started":"2024-10-26T17:21:21.939925Z","shell.execute_reply":"2024-10-26T17:21:22.687953Z"},"trusted":true},"execution_count":456,"outputs":[]},{"cell_type":"code","source":"text = ''.join(text).replace('\\n\\n','\\n').replace('\\n',' ')","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:22.692226Z","iopub.execute_input":"2024-10-26T17:21:22.692542Z","iopub.status.idle":"2024-10-26T17:21:22.706079Z","shell.execute_reply.started":"2024-10-26T17:21:22.692510Z","shell.execute_reply":"2024-10-26T17:21:22.705101Z"},"trusted":true},"execution_count":457,"outputs":[]},{"cell_type":"code","source":"characters = sorted(set(text.split(' ')))\ntexts = text.split(' ')","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:22.707088Z","iopub.execute_input":"2024-10-26T17:21:22.707367Z","iopub.status.idle":"2024-10-26T17:21:22.734880Z","shell.execute_reply.started":"2024-10-26T17:21:22.707336Z","shell.execute_reply":"2024-10-26T17:21:22.733938Z"},"trusted":true},"execution_count":458,"outputs":[]},{"cell_type":"code","source":"# word_dict = {}\n# for i in characters:\n#     word_dict[i] = texts.count(i)\n\n# import pandas as pd\n# import matplotlib.pyplot as plt\n# data = pd.DataFrame(word_dict, index = np.arange(0,len(word_dict))).T[0].reset_index()\n# data = data.rename({0:'cnts'}, axis = 1)\n# data = data.sort_values(by = 'cnts',ascending = False)\n# tot = data['cnts'].sum()\n# data['perc'] = data['cnts'].apply(lambda x:x/tot)","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:23.115419Z","iopub.execute_input":"2024-10-26T17:21:23.115829Z","iopub.status.idle":"2024-10-26T17:21:23.120529Z","shell.execute_reply.started":"2024-10-26T17:21:23.115794Z","shell.execute_reply":"2024-10-26T17:21:23.119511Z"},"trusted":true},"execution_count":459,"outputs":[]},{"cell_type":"code","source":"# ls = data.loc[(data['perc']>0.01)&(data['index']!=\" \")]['index'].to_list()\ncharacters = [text for text in characters if text not in ls]\ntexts = [text for text in texts if text not in ls]","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:23.894677Z","iopub.execute_input":"2024-10-26T17:21:23.895394Z","iopub.status.idle":"2024-10-26T17:21:23.915704Z","shell.execute_reply.started":"2024-10-26T17:21:23.895347Z","shell.execute_reply":"2024-10-26T17:21:23.914877Z"},"trusted":true},"execution_count":460,"outputs":[]},{"cell_type":"code","source":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts([texts])","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:24.429274Z","iopub.execute_input":"2024-10-26T17:21:24.430057Z","iopub.status.idle":"2024-10-26T17:21:24.488224Z","shell.execute_reply.started":"2024-10-26T17:21:24.430014Z","shell.execute_reply":"2024-10-26T17:21:24.487258Z"},"trusted":true},"execution_count":461,"outputs":[]},{"cell_type":"code","source":"# char_to_ind = dict((c,i) for i, c in enumerate(characters))\n\n# ind_to_char = dict((i,c) for i, c in enumerate(characters))","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:25.125214Z","iopub.execute_input":"2024-10-26T17:21:25.125608Z","iopub.status.idle":"2024-10-26T17:21:25.129904Z","shell.execute_reply.started":"2024-10-26T17:21:25.125571Z","shell.execute_reply":"2024-10-26T17:21:25.128943Z"},"trusted":true},"execution_count":462,"outputs":[]},{"cell_type":"code","source":"new=texts","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:25.949006Z","iopub.execute_input":"2024-10-26T17:21:25.949634Z","iopub.status.idle":"2024-10-26T17:21:25.955731Z","shell.execute_reply.started":"2024-10-26T17:21:25.949595Z","shell.execute_reply":"2024-10-26T17:21:25.954748Z"},"trusted":true},"execution_count":463,"outputs":[]},{"cell_type":"code","source":"seq_len = 60\n\nstep_size = 5\n\nsentences = []\nnext_chars = []\n\nfor i in range(0,len(new)-(seq_len+1), step_size):\n    sentences.append(tokenizer.texts_to_sequences([new[i: i+seq_len]]))\n    next_chars.append(tokenizer.word_index[new[i+seq_len]])","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:27.129442Z","iopub.execute_input":"2024-10-26T17:21:27.129802Z","iopub.status.idle":"2024-10-26T17:21:27.452043Z","shell.execute_reply.started":"2024-10-26T17:21:27.129770Z","shell.execute_reply":"2024-10-26T17:21:27.451246Z"},"trusted":true},"execution_count":464,"outputs":[]},{"cell_type":"code","source":"y[9139,next_chars[9139]]","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:28.185525Z","iopub.execute_input":"2024-10-26T17:21:28.186273Z","iopub.status.idle":"2024-10-26T17:21:28.192276Z","shell.execute_reply.started":"2024-10-26T17:21:28.186232Z","shell.execute_reply":"2024-10-26T17:21:28.191373Z"},"trusted":true},"execution_count":465,"outputs":[{"execution_count":465,"output_type":"execute_result","data":{"text/plain":"1.0"},"metadata":{}}]},{"cell_type":"code","source":"x = np.zeros((len(sentences), seq_len))\ny = np.zeros((len(sentences), len(characters)+1))\n\n\nfor i, sentence in enumerate(sentences):\n    for t, idx in enumerate(sentence[0]):\n        x[i, t]=idx\n\n    y[i, next_chars[i]] = 1","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:29.038521Z","iopub.execute_input":"2024-10-26T17:21:29.038893Z","iopub.status.idle":"2024-10-26T17:21:29.336313Z","shell.execute_reply.started":"2024-10-26T17:21:29.038858Z","shell.execute_reply":"2024-10-26T17:21:29.335265Z"},"trusted":true},"execution_count":466,"outputs":[]},{"cell_type":"code","source":"model = Sequential()\nmodel.add(Input((seq_len,1)))\nmodel.add(Embedding(9658,70))\nmodel.add(Reshape((seq_len,70)))\nmodel.add(LSTM(150))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(len(characters)+1))\nmodel.add(Activation('softmax'))","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:21:30.404689Z","iopub.execute_input":"2024-10-26T17:21:30.405063Z","iopub.status.idle":"2024-10-26T17:21:30.471170Z","shell.execute_reply.started":"2024-10-26T17:21:30.405027Z","shell.execute_reply":"2024-10-26T17:21:30.470456Z"},"trusted":true},"execution_count":467,"outputs":[]},{"cell_type":"code","source":"\nmodel.compile(loss = 'categorical_crossentropy', optimizer = RMSprop(0.001), metrics = ['accuracy'])\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:24:03.946016Z","iopub.execute_input":"2024-10-26T17:24:03.946783Z","iopub.status.idle":"2024-10-26T17:24:03.970533Z","shell.execute_reply.started":"2024-10-26T17:24:03.946737Z","shell.execute_reply":"2024-10-26T17:24:03.969700Z"},"trusted":true},"execution_count":480,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_7\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_7\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_7 (\u001b[38;5;33mEmbedding\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m70\u001b[0m)      │       \u001b[38;5;34m676,060\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ reshape_7 (\u001b[38;5;33mReshape\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m70\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_7 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m)            │       \u001b[38;5;34m132,600\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m150\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9139\u001b[0m)           │     \u001b[38;5;34m1,379,989\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_7 (\u001b[38;5;33mActivation\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m9139\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">70</span>)      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">676,060</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ reshape_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Reshape</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">70</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">132,600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">150</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9139</span>)           │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,379,989</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ activation_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Activation</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">9139</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,188,649\u001b[0m (8.35 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,188,649</span> (8.35 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2,188,649\u001b[0m (8.35 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,188,649</span> (8.35 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"model.fit(x, y, batch_size = 170, epochs = 10)\nmodel.save('text_gens.keras')","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:24:04.974542Z","iopub.execute_input":"2024-10-26T17:24:04.975191Z","iopub.status.idle":"2024-10-26T17:24:20.871462Z","shell.execute_reply.started":"2024-10-26T17:24:04.975150Z","shell.execute_reply":"2024-10-26T17:24:20.870641Z"},"trusted":true},"execution_count":481,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - accuracy: 0.9615 - loss: 0.2394\nEpoch 2/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9641 - loss: 0.2032\nEpoch 3/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9683 - loss: 0.1983\nEpoch 4/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step - accuracy: 0.9613 - loss: 0.2050\nEpoch 5/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 20ms/step - accuracy: 0.9757 - loss: 0.1671\nEpoch 6/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9717 - loss: 0.1747\nEpoch 7/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9758 - loss: 0.1607\nEpoch 8/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9792 - loss: 0.1580\nEpoch 9/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9769 - loss: 0.1535\nEpoch 10/10\n\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 20ms/step - accuracy: 0.9755 - loss: 0.1584\n","output_type":"stream"}]},{"cell_type":"code","source":"model = tf.keras.models.load_model('text_gens.keras')\n\ndef sample(preds, temperature = 1.0):\n    \n    preds = np.asarray(preds).astype('float64')\n    preds = np.log(preds)/temperature\n    exp_preds = np.exp(preds)\n    preds = exp_preds/np.sum(exp_preds)\n\n    probas = np.random.multinomial(1, preds, 1)\n    return np.argmax(probas)\n\n\ndef generate(length, temperature,text = None):\n    generated = ''\n    if text == None:\n        start_index = np.random.randint(0,len(new)-seq_len-1)\n        sentence = ' '.join(new[start_index: start_index+seq_len])\n    else :\n        sentence = text\n    generated += sentence\n    for i in range(length):\n        x1 = np.zeros((1, seq_len))\n        for t, character in enumerate(sentence.split(' ')):\n            x1[0][t]=tokenizer.word_index[character]\n        \n        predictions = model.predict(x1, verbose = 0)[0]\n\n        nex_index = sample(predictions, temperature)\n        next_chars= tokenizer.index_word[nex_index]\n\n        generated += ' '+next_chars\n        sentence=' '.join(sentence.split(' ')[1:])+' '+next_chars\n    return generated\n\n\nfor _ in range(2):\n    print(generate(1,0.1,'successfully resisted northwestern kingdoms'))","metadata":{"execution":{"iopub.status.busy":"2024-10-26T17:24:31.392579Z","iopub.execute_input":"2024-10-26T17:24:31.393215Z","iopub.status.idle":"2024-10-26T17:24:31.766750Z","shell.execute_reply.started":"2024-10-26T17:24:31.393177Z","shell.execute_reply":"2024-10-26T17:24:31.765833Z"},"trusted":true},"execution_count":483,"outputs":[{"name":"stdout","text":"successfully resisted northwestern kingdoms south\nsuccessfully resisted northwestern kingdoms south\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}